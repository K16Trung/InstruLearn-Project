// <auto-generated />
using System;
using InstruLearn_Application.Model.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InstruLearn_Application.Model.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250323065654_add_infor_account")]
    partial class add_infor_account
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Account", b =>
                {
                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateOfEmployment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Certification", b =>
                {
                    b.Property<int>("CertificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CertificationId"));

                    b.Property<string>("CertificationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CoursePackageId")
                        .HasColumnType("int");

                    b.Property<int>("LearnerId")
                        .HasColumnType("int");

                    b.HasKey("CertificationId");

                    b.HasIndex("CoursePackageId")
                        .IsUnique();

                    b.HasIndex("LearnerId");

                    b.ToTable("Certifications");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"));

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("ClassTime")
                        .HasColumnType("time");

                    b.Property<int>("CoursePackageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxStudents")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SyllabusId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("TeacherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("totalDays")
                        .HasColumnType("int");

                    b.HasKey("ClassId");

                    b.HasIndex("CoursePackageId");

                    b.HasIndex("SyllabusId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.ClassDay", b =>
                {
                    b.Property<int>("ClassDayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassDayId"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.HasKey("ClassDayId");

                    b.HasIndex("ClassId");

                    b.ToTable("ClassDays");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.CourseType", b =>
                {
                    b.Property<int>("CourseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseTypeId"));

                    b.Property<string>("CourseTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseTypeId");

                    b.ToTable("CourseTypes");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Course_Content", b =>
                {
                    b.Property<int>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContentId"));

                    b.Property<int>("CoursePackageId")
                        .HasColumnType("int");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContentId");

                    b.HasIndex("CoursePackageId");

                    b.ToTable("Course_Contents");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Course_Content_Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<string>("ItemDes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemTypeId")
                        .HasColumnType("int");

                    b.HasKey("ItemId");

                    b.HasIndex("ContentId");

                    b.HasIndex("ItemTypeId");

                    b.ToTable("Course_Content_Items");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Course_Package", b =>
                {
                    b.Property<int>("CoursePackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CoursePackageId"));

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<string>("Headline")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("CoursePackageId");

                    b.HasIndex("CourseTypeId");

                    b.ToTable("CoursePackages");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.FeedBack", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CoursePackageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeedbackContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("FeedbackId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CoursePackageId");

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.FeedbackReplies", b =>
                {
                    b.Property<int>("FeedbackRepliesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackRepliesId"));

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FeedbackId")
                        .HasColumnType("int");

                    b.Property<string>("RepliesContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeedbackRepliesId");

                    b.HasIndex("AccountId");

                    b.HasIndex("FeedbackId");

                    b.ToTable("FeedbackReplies");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.ItemTypes", b =>
                {
                    b.Property<int>("ItemTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemTypeId"));

                    b.Property<string>("ItemTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemTypeId");

                    b.ToTable("ItemTypes");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Learner", b =>
                {
                    b.Property<int>("LearnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LearnerId"));

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LearnerId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Learners");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.LearningRegistrationDay", b =>
                {
                    b.Property<int>("LearnRegisDayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LearnRegisDayId"));

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<int>("LearningRegisId")
                        .HasColumnType("int");

                    b.HasKey("LearnRegisDayId");

                    b.HasIndex("LearningRegisId");

                    b.ToTable("LearningRegistrationDays");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Learning_Registration", b =>
                {
                    b.Property<int>("LearningRegisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LearningRegisId"));

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LearnerId")
                        .HasColumnType("int");

                    b.Property<string>("LevelAssigned")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MajorId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfSession")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RegisTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("StartDay")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int>("TimeLearning")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("TimeStart")
                        .HasColumnType("time");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LearningRegisId");

                    b.HasIndex("ClassId");

                    b.HasIndex("LearnerId");

                    b.HasIndex("MajorId");

                    b.HasIndex("RegisTypeId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Learning_Registrations");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Learning_Registration_Type", b =>
                {
                    b.Property<int>("RegisTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegisTypeId"));

                    b.Property<decimal>("RegisPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RegisTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RegisTypeId");

                    b.ToTable("Learning_Registration_Types");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Major", b =>
                {
                    b.Property<int>("MajorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MajorId"));

                    b.Property<string>("MajorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MajorId");

                    b.ToTable("Majors");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.MajorTest", b =>
                {
                    b.Property<int>("MajorTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MajorTestId"));

                    b.Property<int>("MajorId")
                        .HasColumnType("int");

                    b.Property<string>("MajorTestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MajorTestId");

                    b.HasIndex("MajorId");

                    b.ToTable("MajorTests");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Manager", b =>
                {
                    b.Property<int>("ManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManagerId"));

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ManagerId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PaymentFor")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("TransactionId");

                    b.HasIndex("WalletId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Purchase", b =>
                {
                    b.Property<int>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseId"));

                    b.Property<int>("LearnerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("PurchaseId");

                    b.HasIndex("LearnerId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Purchase_Items", b =>
                {
                    b.Property<int>("PurchaseItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseItemId"));

                    b.Property<int>("CoursePackageId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PurchaseItemId");

                    b.HasIndex("CoursePackageId");

                    b.HasIndex("PurchaseId");

                    b.ToTable("Purchase_Items");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.QnA", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CoursePackageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("QuestionContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CoursePackageId");

                    b.ToTable("QnA");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.QnAReplies", b =>
                {
                    b.Property<int>("QnARepliesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QnARepliesId"));

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("QnAContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("QnARepliesId");

                    b.HasIndex("AccountId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QnAReplies");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.ScheduleDays", b =>
                {
                    b.Property<int>("ScheduleDayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleDayId"));

                    b.Property<string>("DayOfWeeks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.HasKey("ScheduleDayId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("ScheduleDays");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Schedules", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleId"));

                    b.Property<int?>("LearnerId")
                        .HasColumnType("int");

                    b.Property<int>("LearningRegisId")
                        .HasColumnType("int");

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("TimeEnd")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("TimeStart")
                        .HasColumnType("time");

                    b.HasKey("ScheduleId");

                    b.HasIndex("LearnerId");

                    b.HasIndex("LearningRegisId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StaffId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Syllabus", b =>
                {
                    b.Property<int>("SyllabusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SyllabusId"));

                    b.Property<string>("SyllabusDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SyllabusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SyllabusId");

                    b.ToTable("Syllabus");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeacherId"));

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Heading")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Links")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MajorId")
                        .HasColumnType("int");

                    b.HasKey("TeacherId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("MajorId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Test_Result", b =>
                {
                    b.Property<int>("TestResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestResultId"));

                    b.Property<int>("LearnerId")
                        .HasColumnType("int");

                    b.Property<int?>("LearningRegisId")
                        .HasColumnType("int");

                    b.Property<int?>("MajorId")
                        .HasColumnType("int");

                    b.Property<int>("ResultType")
                        .HasColumnType("int");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("TestResultId");

                    b.HasIndex("LearnerId");

                    b.HasIndex("LearningRegisId");

                    b.HasIndex("MajorId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Test_Results");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Wallet", b =>
                {
                    b.Property<int>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalletId"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("LearnerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("WalletId");

                    b.HasIndex("LearnerId")
                        .IsUnique();

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.WalletTransaction", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletTransactions");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Admin", b =>
                {
                    b.HasOne("InstruLearn_Application.Model.Models.Account", "Account")
                        .WithOne("Admin")
                        .HasForeignKey("InstruLearn_Application.Model.Models.Admin", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Certification", b =>
                {
                    b.HasOne("InstruLearn_Application.Model.Models.Course_Package", "CoursePackages")
                        .WithOne("Certifications")
                        .HasForeignKey("InstruLearn_Application.Model.Models.Certification", "CoursePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InstruLearn_Application.Model.Models.Learner", "Learner")
                        .WithMany("Certifications")
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoursePackages");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Class", b =>
                {
                    b.HasOne("InstruLearn_Application.Model.Models.Course_Package", "CoursePackage")
                        .WithMany("Classes")
                        .HasForeignKey("CoursePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InstruLearn_Application.Model.Models.Syllabus", "Syllabus")
                        .WithMany("Classes")
                        .HasForeignKey("SyllabusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InstruLearn_Application.Model.Models.Teacher", "Teacher")
                        .WithMany("Classes")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CoursePackage");

                    b.Navigation("Syllabus");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.ClassDay", b =>
                {
                    b.HasOne("InstruLearn_Application.Model.Models.Class", "Class")
                        .WithMany("ClassDays")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Course_Content", b =>
                {
                    b.HasOne("InstruLearn_Application.Model.Models.Course_Package", "CoursePackage")
                        .WithMany("CourseContents")
                        .HasForeignKey("CoursePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoursePackage");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Course_Content_Item", b =>
                {
                    b.HasOne("InstruLearn_Application.Model.Models.Course_Content", "CourseContent")
                        .WithMany("CourseContentItems")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InstruLearn_Application.Model.Models.ItemTypes", "ItemType")
                        .WithMany("CourseContentItems")
                        .HasForeignKey("ItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseContent");

                    b.Navigation("ItemType");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Course_Package", b =>
                {
                    b.HasOne("InstruLearn_Application.Model.Models.CourseType", "Type")
                        .WithMany("CoursePackages")
                        .HasForeignKey("CourseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.FeedBack", b =>
                {
                    b.HasOne("InstruLearn_Application.Model.Models.Account", "Account")
                        .WithMany("FeedBacks")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InstruLearn_Application.Model.Models.Course_Package", "CoursePackage")
                        .WithMany("FeedBacks")
                        .HasForeignKey("CoursePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("CoursePackage");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.FeedbackReplies", b =>
                {
                    b.HasOne("InstruLearn_Application.Model.Models.Account", "Account")
                        .WithMany("FeedbackReplies")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InstruLearn_Application.Model.Models.FeedBack", "FeedBack")
                        .WithMany("FeedbackReplies")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("FeedBack");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Learner", b =>
                {
                    b.HasOne("InstruLearn_Application.Model.Models.Account", "Account")
                        .WithOne("Learner")
                        .HasForeignKey("InstruLearn_Application.Model.Models.Learner", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.LearningRegistrationDay", b =>
                {
                    b.HasOne("InstruLearn_Application.Model.Models.Learning_Registration", "Learning_Registration")
                        .WithMany("LearningRegistrationDay")
                        .HasForeignKey("LearningRegisId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Learning_Registration");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Learning_Registration", b =>
                {
                    b.HasOne("InstruLearn_Application.Model.Models.Class", "Classes")
                        .WithMany("Learning_Registration")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("InstruLearn_Application.Model.Models.Learner", "Learner")
                        .WithMany("Learning_Registrations")
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InstruLearn_Application.Model.Models.Major", "Major")
                        .WithMany("learning_Registrations")
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InstruLearn_Application.Model.Models.Learning_Registration_Type", "Learning_Registration_Type")
                        .WithMany("Learning_Registrations")
                        .HasForeignKey("RegisTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InstruLearn_Application.Model.Models.Teacher", "Teacher")
                        .WithMany("Learning_Registrations")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Classes");

                    b.Navigation("Learner");

                    b.Navigation("Learning_Registration_Type");

                    b.Navigation("Major");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.MajorTest", b =>
                {
                    b.HasOne("InstruLearn_Application.Model.Models.Major", "Major")
                        .WithMany("MajorTests")
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Major");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Manager", b =>
                {
                    b.HasOne("InstruLearn_Application.Model.Models.Account", "Account")
                        .WithOne("Manager")
                        .HasForeignKey("InstruLearn_Application.Model.Models.Manager", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Payment", b =>
                {
                    b.HasOne("InstruLearn_Application.Model.Models.WalletTransaction", "WalletTransaction")
                        .WithMany("Payments")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InstruLearn_Application.Model.Models.Wallet", "Wallet")
                        .WithMany("Payments")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");

                    b.Navigation("WalletTransaction");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Purchase", b =>
                {
                    b.HasOne("InstruLearn_Application.Model.Models.Learner", "Learner")
                        .WithMany("Purchases")
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Purchase_Items", b =>
                {
                    b.HasOne("InstruLearn_Application.Model.Models.Course_Package", "CoursePackage")
                        .WithMany("PurchaseItems")
                        .HasForeignKey("CoursePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InstruLearn_Application.Model.Models.Purchase", "Purchase")
                        .WithMany("PurchaseItems")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoursePackage");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.QnA", b =>
                {
                    b.HasOne("InstruLearn_Application.Model.Models.Account", "Account")
                        .WithMany("QnAs")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InstruLearn_Application.Model.Models.Course_Package", "CoursePackage")
                        .WithMany("QnAs")
                        .HasForeignKey("CoursePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("CoursePackage");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.QnAReplies", b =>
                {
                    b.HasOne("InstruLearn_Application.Model.Models.Account", "Account")
                        .WithMany("QnAReplies")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InstruLearn_Application.Model.Models.QnA", "QnA")
                        .WithMany("QnAReplies")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("QnA");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.ScheduleDays", b =>
                {
                    b.HasOne("InstruLearn_Application.Model.Models.Schedules", "Schedules")
                        .WithMany("ScheduleDays")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Schedules", b =>
                {
                    b.HasOne("InstruLearn_Application.Model.Models.Learner", "Learner")
                        .WithMany("Schedules")
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InstruLearn_Application.Model.Models.Learning_Registration", "Registration")
                        .WithMany("Schedules")
                        .HasForeignKey("LearningRegisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InstruLearn_Application.Model.Models.Teacher", "Teacher")
                        .WithMany("Schedules")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Learner");

                    b.Navigation("Registration");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Staff", b =>
                {
                    b.HasOne("InstruLearn_Application.Model.Models.Account", "Account")
                        .WithOne("Staff")
                        .HasForeignKey("InstruLearn_Application.Model.Models.Staff", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Teacher", b =>
                {
                    b.HasOne("InstruLearn_Application.Model.Models.Account", "Account")
                        .WithOne("Teacher")
                        .HasForeignKey("InstruLearn_Application.Model.Models.Teacher", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InstruLearn_Application.Model.Models.Major", "Major")
                        .WithMany("Teachers")
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Account");

                    b.Navigation("Major");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Test_Result", b =>
                {
                    b.HasOne("InstruLearn_Application.Model.Models.Learner", "Learner")
                        .WithMany("Test_Results")
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InstruLearn_Application.Model.Models.Learning_Registration", "LearningRegistration")
                        .WithMany("Test_Results")
                        .HasForeignKey("LearningRegisId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InstruLearn_Application.Model.Models.Major", "Major")
                        .WithMany("TestResults")
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InstruLearn_Application.Model.Models.Teacher", "Teacher")
                        .WithMany("TestResults")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Learner");

                    b.Navigation("LearningRegistration");

                    b.Navigation("Major");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Wallet", b =>
                {
                    b.HasOne("InstruLearn_Application.Model.Models.Learner", "Learner")
                        .WithOne("Wallet")
                        .HasForeignKey("InstruLearn_Application.Model.Models.Wallet", "LearnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.WalletTransaction", b =>
                {
                    b.HasOne("InstruLearn_Application.Model.Models.Wallet", "Wallet")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Account", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("FeedBacks");

                    b.Navigation("FeedbackReplies");

                    b.Navigation("Learner");

                    b.Navigation("Manager");

                    b.Navigation("QnAReplies");

                    b.Navigation("QnAs");

                    b.Navigation("Staff");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Class", b =>
                {
                    b.Navigation("ClassDays");

                    b.Navigation("Learning_Registration");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.CourseType", b =>
                {
                    b.Navigation("CoursePackages");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Course_Content", b =>
                {
                    b.Navigation("CourseContentItems");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Course_Package", b =>
                {
                    b.Navigation("Certifications")
                        .IsRequired();

                    b.Navigation("Classes");

                    b.Navigation("CourseContents");

                    b.Navigation("FeedBacks");

                    b.Navigation("PurchaseItems");

                    b.Navigation("QnAs");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.FeedBack", b =>
                {
                    b.Navigation("FeedbackReplies");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.ItemTypes", b =>
                {
                    b.Navigation("CourseContentItems");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Learner", b =>
                {
                    b.Navigation("Certifications");

                    b.Navigation("Learning_Registrations");

                    b.Navigation("Purchases");

                    b.Navigation("Schedules");

                    b.Navigation("Test_Results");

                    b.Navigation("Wallet")
                        .IsRequired();
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Learning_Registration", b =>
                {
                    b.Navigation("LearningRegistrationDay");

                    b.Navigation("Schedules");

                    b.Navigation("Test_Results");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Learning_Registration_Type", b =>
                {
                    b.Navigation("Learning_Registrations");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Major", b =>
                {
                    b.Navigation("MajorTests");

                    b.Navigation("Teachers");

                    b.Navigation("TestResults");

                    b.Navigation("learning_Registrations");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Purchase", b =>
                {
                    b.Navigation("PurchaseItems");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.QnA", b =>
                {
                    b.Navigation("QnAReplies");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Schedules", b =>
                {
                    b.Navigation("ScheduleDays");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Syllabus", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Teacher", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Learning_Registrations");

                    b.Navigation("Schedules");

                    b.Navigation("TestResults");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.Wallet", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("WalletTransactions");
                });

            modelBuilder.Entity("InstruLearn_Application.Model.Models.WalletTransaction", b =>
                {
                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
